#!/bin/bash
# 
# License: LGPL
# Author: Benoit DOLEZ <bdolez@zenetys.com>
# Copyright: 2020
# Version: 1.0
#

# filename usage to determine action
# zpki init
# zpki create-key CNAME
# zpki create-req CNAME
# zpki create-crt CNAME

# directory tree :
# .zpki             : ZPKI managed directory
# ca.crt            : CA Certificate
# ca.cnf            : Config for CAb
# ca.key            : CA Private Key
# keys/SUBJ.key     : SUBJ CommonName Private Key
# certs/SUBJ.crt    : SUBJ CommonName Certificate
# requests/SUBJ.req : SUBJ CommonName Certificate Request

NUMBITS=${ZPKI_NUMBITS:-4096}
NUMDAYS=${ZPKI_NUMDAYS:-3653}
CIPHER=${ZPKI_CIPHER:-aes256}
DIGEST=${ZPKI_DIGEST:-sha256}

DEFAULT_CONFIG="
# look at :
# https://www.openssl.org/docs/manmaster/man5/x509v3_config.html

[ ca ]
default_ca             = default_ca_section

[ default_ca_section ]
dir                    = \$ENV::PWD
certs                  = \$dir/certs
new_certs_dir          = \$dir/certs.new
crl_dir                = \$dir/crl
database               = \$dir/ca.idx
certificate            = \$dir/ca.crt
serial                 = \$dir/ca.srl
crlnumber              = \$dir/ca.crlnum
crl                    = \$dir/ca.crl
private_key            = \$dir/ca.key

copy_extensions        = copy

default_days           = ${NUMDAYS}
default_crl_days       = 30
default_md             = ${DIGEST}
preserve               = no

policy                 = policy_match

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ req ]
default_bits           = ${NUMBITS}
default_md             = ${DIGEST}
distinguished_name     = distinguished_name

[ x509 ]
x509_extensions        = x509v3_ext

[ crl ]
authorityKeyIdentifier = keyid:always

[ distinguished_name ]
countryName            = Country Name 
localityName           = Locality Name (eg, city)
0.organizationName     = Organization Name (eg, company)
organizationalUnitName = Organizational Unit Name (eg, section)
commonName             = Common Name
emailAddress           = Email Address

[ ca_ext ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
keyUsage               = cRLSign, keyCertSign
# subjectAltName         = email:copy
# issuerAltName          = issuer:copy

[ x509v3_ext ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:false
# nsCertType             = @nsCertType_section
# keyUsage               = @keyUsage_section
# extendedKeyUsage       = @extendedKeyUsage_section
# subjectAltName         = email:copy
# issuerAltName          = issuer:copy

[ nsCertType_section ]
# client            = true
# server            = true
# email             = true
# objsign           = true
# reserved          = true
# sslCA             = true
# emailCA           = true
# objCA             = true

[ keyUsage_section ]
# digitalSignature = true
# nonRepudiation   = true
# keyEncipherment  = true
# dataEncipherment = true
# keyAgreement     = true
# keyCertSign      = true
# cRLSign          = true
# encipherOnly     = true
# decipherOnly     = true

[ extentedKeyUsage_section ]
# serverAuth       = true    # SSL/TLS Web Server Authentication.
# clientAuth       = true    # SSL/TLS Web Client Authentication.
# codeSigning      = true    # Code signing.
# emailProtection  = true    # E-mail Protection (S/MIME).
# timeStamping     = true    # Trusted Timestamping
# OCSPSigning      = true    # OCSP Signing
# ipsecIKE         = true    # ipsec Internet Key Exchange
# msCodeInd        = true    # Microsoft Individual Code Signing (authenticode)
# msCodeCom        = true    # Microsoft Commercial Code Signing (authenticode)
# msCTLSign        = true    # Microsoft Trust List Signing
# msEFS            = true    # Microsoft Encrypted File System
"

function yesno() {
  local QUESTION="$1" ; shift
  [[ $YES == 1 ]] && return 0
  while : ; do
    echo -n "$QUESTION (yes/[N]o): " && read
    case $REPLY in
      [Yy]|[Yy][Ee]|[Yy][Ee][Ss]) return 0 ;;
      [Nn]|[Nn][Oo]) return 1 ;;
      *) echo "Bad answer, try again" ;;
    esac
  done
  return 0
}

function echo_quoted() {
  local s=$1 ; shift

  echo -n "${PREFIX:+$PREFIX }"
  # A..Z a..z 0..9 + - , . / =
  [[ $s && -z ${s//[A-Za-z+-9=_]} ]] && echo -n "$s" || echo -n " '${s}'"
  for s in "$@"; do
    [[ $s && -z ${s//[A-Za-z+-9=_]} ]] && echo -n " $s" || echo -n " '${s}'"
  done
  echo
}

function openssl_debug() {
  local IFS=$'\n'
  (( VERBOSE >= 1 )) && PREFIX="# openssl" echo_quoted "$@" >&2
  ERRMSG=( $(openssl "$@" 2>&1) )
  return $?
}

function is-exists() {
  local FORCE
  [[ ${1:0:1} == - ]] && FORCE=${1:1} && shift
  if [[ -s $1 && ! ${FORCE} ]] ; then
    (( VERBOSE >= 2 )) && echo "$1: already exists, bypass" >&2
    return 0
  fi
  return 1
}

function is-error() {
  local ERR=$?
  [[ ${1:0:1} == - ]] && ERR=${1:1} && shift
  [[ $ERR == 0 ]] && return 0
  echo -n "ERROR: $1" >&2
  echo "${ERRMSG[*]/#/$'\n'> }" >&2
  return $ERR
}

#X-ACTION create-cnf: create default openssl config file
function create-cnf() {
  local CNFFILE=${1:-$CNFFILE}
  [[ $FORCE ]] && FORCE_CREATE_CNF=1 && unset FORCE
  is-exists -$FORCE_CREATE_CNF "$CNFFILE" && return 0
  yesno "create config '$CNFFILE' ?" || return
  touch "$CNFFILE"
  is-error "can't create config '$CNFFILE'" || return
  echo "$DEFAULT_CONFIG" >> $CNFFILE
  return 0
}

#X-ACTION create-key [CN|SUBJ]: create key file
function create-key() {
  local KEYFILE=${1:-$KEYFILE}
  [[ $FORCE ]] && FORCE_CREATE_KEY=1 && unset FORCE
  is-exists -$FORCE_CREATE_KEY "$KEYFILE" && return 0
  yesno "create key '$KEYFILE' ?" || return
  PARAMS=(
    -out "$KEYFILE"
    ${CIPHER:+-$CIPHER}
    ${PASSWORD:+-passout env:PASSWORD}
    $NUMBITS
  )
  $OPENSSL genrsa "${PARAMS[@]}"
  is-error "can't create key '$KEYFILE'" || return
}

#X-ACTION create-req CN|SUBJ [ALTNAMES...]: create request
function create-req() {
  local REQFILE=${1:-$REQFILE}
  [[ $FORCE ]] && FORCE_CREATE_REQ=1 && unset FORCE
  is-exists -$FORCE_CREATE_REQ "$REQFILE" && return 0
  yesno "create certificate request '$REQFILE' ?" || return
  create-key "$KEYFILE" || return
  PARAMS=(
    -batch
    -new
    -out "$REQFILE"
    -key "$KEYFILE"
    ${SUBJECT:+-subj "$SUBJECT"}
    ${SUBJALT:+-addext "subjectAltName=$SUBJALT"}
    ${PASSWORD:+-passin env:PASSWORD}
  )
  $OPENSSL req "${PARAMS[@]}"
  is-error "can't create certificate request '$REQFILE'" || return
}

#X-ACTION create-self CN|SUBJ [ALTNAMES...]: create self signed certificate
function create-self() {
  local CRTFILE=${1:-$CRTFILE}
  [[ $FORCE ]] && FORCE_CREATE_CRT=1 && unset FORCE
  is-exists -$FORCE_CREATE_CRT $CRTFILE && return 0
  yesno "create self-signed certificate '$CRTFILE' ?" || return
  create-cnf "$CNFFILE" || return
  create-key "$KEYFILE" || return
  PARAMS=(
    -new -x509
    -days $NUMDAYS
    -out "$CRTFILE"
    -key "$KEYFILE"
    ${SUBJECT:+-subj "$SUBJECT"}
    ${SUBJALT:+-addext "subjectAltName=$SUBJALT"}
    -config "$CNFFILE" -extensions ${EXT:-x509v3_ext}
    ${PASSWORD:+-passin env:PASSWORD}
  )
  $OPENSSL req "${PARAMS[@]}"
  is-error "can't create auto-signed '$CRTFILE'" || return
}

#X-ACTION create-ca: create certificat authority & storage in BASEDIR
function create-ca() {
  local CNFFILE=$CA_CNFFILE
  local KEYFILE=$CA_KEYFILE
  local CRTFILE=$CA_CRTFILE
  local SUBJALT # empty
  local FORCE_CREATE_CRT # empty
  local SERIAL=$RANDOM$RANDOM$RANDOM

  create-cnf  "$CNFFILE" || return
  PASSWORD=$CA_PASSWORD create-key "$KEYFILE" || return
  PASSWORD=$CA_PASSWORD EXT="ca_ext" create-self "$CRTFILE" || return
  [[ -d $CA_PATH ]]            || mkdir -p $CA_PATH
  [[ -d $CA_PATH/certs ]]      || mkdir $CA_PATH/certs
  [[ -d $CA_PATH/certs.new ]]  || mkdir $CA_PATH/certs.new
  [[ -d $CA_PATH/crl ]]        || mkdir $CA_PATH/crl
  [[ -d $CA_PATH/private ]]    || mkdir $CA_PATH/private
  [[ -e $CA_PATH/ca.idx ]]     || touch $CA_PATH/ca.idx
  [[ -s $CA_PATH/ca.srl ]]     || printf "%016X\n" $SERIAL > $CA_PATH/ca.srl
  [[ -s $CA_PATH/ca.crlnum ]]  || echo 01 > $CA_PATH/ca.crlnum
  [[ -e $CA_PATH/.zpki ]]      || touch $CA_PATH/.zpki
  return 0
}

function create-cert() {
  create-crt "$@"
}

#X-ACTION create-crt {CN|SUBJ} [ALTNAMES...]: create certificate
function create-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ $FORCE ]] && FORCE_CREATE_CRT=1 && unset FORCE
  is-exists -$FORCE_CREATE_CRT "$CRTFILE" && return 0
  yesno "create certificate '$CRTFILE' ?" || return
  CNFFILE="$CA_CNFFILE" create-req "$REQFILE" || return
  PARAMS=(
    -config "$CA_CNFFILE"
    -batch
    -in  "$REQFILE"
    -out "$CRTFILE"
    -days $NUMDAYS
    -extensions ${EXT:-x509v3_ext}
    ${PASSWORD:+-passin env:CA_PASSWORD}
  )
  $OPENSSL ca "${PARAMS[@]}"
  is-error "can't sign request '$REQFILE' to '$CRTFILE'" || return
}

#X-ACTION revoke: revoke certificate
function revoke() {
  ## FIXME
  # revoke
  return 0
}

#X-ACTION update: upate certificate
function update() {
  ## FIXME
  # update DB
  # gencrl
  return 0
}

function usage() {
  local IFS=$'\t'
  exec >&2
  if [[ $0 == "-bash" ]] ; then return 1 ; fi
  [[ $# -gt 0 ]] && echo "ERROR: $*"
  version
  echo "Usage: ${0##*/} [options] ACTION [ACTION-PARAMETERS]"
  echo "Options:"
  sed -nr "s/^[[:space:]]*## ([^:]*): /\1\t/p" -- "$0" |
    while read OPT DESC ; do
      printf " %-20s %s\n" "$OPT" "$DESC"
    done
  echo
  echo "<ACTION> is one of :"
  sed -nr "s/^#X-ACTION ([^:]*): /\1\t/p" -- "$0" |
    while read OPT DESC ; do
      printf " %-20s %s\n" "$OPT" "$DESC"
    done
  echo

  return 0
}

function version() {
  local PROGFILE=$0
  local VERSION=$(sed -n 's/^# Version: //p' $PROGFILE)
  local AUTHOR=$(sed -n 's/^# Author: //p' $PROGFILE)
  local LICENSE=$(sed -n 's/^# License: //p' $PROGFILE)

  echo "${PROGFILE##*/} $VERSION - $AUTHOR - $LICENSE"
}

declare OPENSSL=${ZPKI_OPENSSL:-openssl_debug}
declare BASEDIR=""
declare VERBOSE=1
declare XDEBUG=0

while (( $# > 0 )); do
  case "$1" in
    ## -h, --help: This help
    -h|--help) usage && exit 0 ;;
    ## -V, --version: Show version
    -V|--version) version && exit 0 ;;
    ## --x-debug: Enable bash debug mode
    --x-debug)    XDEBUG=1 ;;
    ## -v, --verbose: Define verbose level (must be repeat)
    -v|--verbose) ((VERBOSE++)) ;;
    ## -q, --quiet: Set verbose level to 0
    -q|--quiet) ((VERBOSE=0)) ;;
    ## -C, --ca: Set current CA base directory
    --ca) BASEDIR=$2 ; shift ;;
    ## -y, --yes: valid all response
    -y|--yes) YES=1 ;;
    ## -c, --cipher: Define cipher (none for no encryption)
    -c|--cipher) CIPHER=$2 ; [[ $CIPHER == none ]] && unset CIPHER ; shift ;;
    # generic args
    --) shift ; break ;;
    -*) usage "Unknown parameter '$1'" && exit 1 ;;
    *) ARGS+=( "$1" ) ;;
  esac
  shift
done

[[ $XDEBUG == 1 ]] && set -x

####################################################
## main program starts here
####################################################

## FIXME - smart detection of action wanted

[[ $PASSWORD ]] && export PASSWORD
[[ $CA_PASSWORD ]] && export CA_PASSWORD

COMMAND=${ARGS[0]}
COMMON_NAME=${ARGS[1]}

CA_PATH=${BASEDIR:-.}
CA_KEYFILE=${BASEDIR:+$BASEDIR/}ca.key
CA_CRTFILE=${BASEDIR:+$BASEDIR/}ca.crt
CA_CNFFILE=${BASEDIR:+$BASEDIR/}ca.cnf

[[ -z $COMMON_NAME ]] && exit 99

SUBJECT="/CN=$COMMON_NAME"

for ((i=2;i<${#ARGS[@]};i++)) ; do
  SUBJALT="${SUBJALT:+$SUBJALT,}${ARGS[i]}"
done

FILENAME=${COMMON_NAME//[^A-Za-z0-9@_-]/_}
if [[ $CA || $COMMAND == "create-crt" ]] ; then
  SUBJECT=${CA_SUBJECT:-"/CN=Certificate Authority"} create-ca || return
  KEYFILE=${KEYFILE:-private/$FILENAME.key}
  CRTFILE=${CRTFILE:-certs/$FILENAME.crt}
  REQFILE=${REQFILE:-certs/$FILENAME.req}
else
  KEYFILE=${KEYFILE:-$FILENAME.key}
  CNFFILE=${CNFFILE:-$FILENAME.cnf}
  CRTFILE=${CRTFILE:-$FILENAME.crt}
  REQFILE=${REQFILE:-$FILENAME.req}
fi

$COMMAND


